{"ast":null,"code":"var _jsxFileName = \"/home/andrea/Documentos/TFG/quantum-solver/quantum_solver_web/src/pages/TokenPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API = process.env.REACT_APP_API;\nexport function TokenPage() {\n  _s();\n\n  const navigate = useNavigate();\n  let token = '';\n\n  const getToken = event => {\n    token = event.target.value;\n  };\n\n  const sendToken = async () => {\n    console.log(token);\n    const guest_mode_flag = token === '';\n    const result = await fetch(`${API}/set-token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        token\n      },\n      body: JSON.stringify({\n        token,\n        guest_mode_flag\n      })\n    });\n    const data = await result.json();\n    console.log('sendToken:', data);\n\n    if (data['err']) {\n      alert(data['msg']);\n    } else {\n      window.sessionStorage.setItem('token', data['msg']);\n      goToMenu();\n    }\n  };\n\n  const goToMenu = () => {\n    navigate('/menu', {\n      replace: true\n    });\n  };\n\n  const checkAndSend = async () => {\n    token = token !== '' ? token : 'empty_string_token';\n    sendToken();\n  };\n\n  const guestMode = async () => {\n    token = '';\n    sendToken();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"QuantumSolver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Write your IBMQ token: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: getToken,\n      placeholder: \"IBMQ token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      id: \"okBtn\",\n      onClick: checkAndSend,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Or\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: guestMode,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Use Guest Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TokenPage, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = TokenPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenPage\");","map":{"version":3,"sources":["/home/andrea/Documentos/TFG/quantum-solver/quantum_solver_web/src/pages/TokenPage.tsx"],"names":["React","useNavigate","API","process","env","REACT_APP_API","TokenPage","navigate","token","getToken","event","target","value","sendToken","console","log","guest_mode_flag","result","fetch","method","headers","body","JSON","stringify","data","json","alert","window","sessionStorage","setItem","goToMenu","replace","checkAndSend","guestMode"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,kBAA1B;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB;AAEA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AAC1B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAIO,KAAK,GAAG,EAAZ;;AACA,QAAMC,QAAQ,GAAIC,KAAD,IAAgD;AAC/DF,IAAAA,KAAK,GAAGE,KAAK,CAACC,MAAN,CAAaC,KAArB;AACD,GAFD;;AAGA,QAAMC,SAAS,GAAG,YAAY;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA,UAAMQ,eAAe,GAAGR,KAAK,KAAK,EAAlC;AACA,UAAMS,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEhB,GAAI,YAAR,EAAqB;AAC7CiB,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,OAAO,EAAE;AAAC,wBAAgB,kBAAjB;AAAqCZ,QAAAA;AAArC,OAFoC;AAG7Ca,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACf,QAAAA,KAAD;AAAQQ,QAAAA;AAAR,OAAf;AAHuC,KAArB,CAA1B;AAKA,UAAMQ,IAAI,GAAG,MAAMP,MAAM,CAACQ,IAAP,EAAnB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BS,IAA1B;;AACA,QAAIA,IAAI,CAAC,KAAD,CAAR,EAAiB;AACfE,MAAAA,KAAK,CAACF,IAAI,CAAC,KAAD,CAAL,CAAL;AACD,KAFD,MAGK;AACHG,MAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,EAAuCL,IAAI,CAAC,KAAD,CAA3C;AACAM,MAAAA,QAAQ;AACT;AACF,GAjBD;;AAkBA,QAAMA,QAAQ,GAAG,MAAM;AACrBvB,IAAAA,QAAQ,CAAC,OAAD,EAAU;AAACwB,MAAAA,OAAO,EAAE;AAAV,KAAV,CAAR;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAG,YAAY;AAC/BxB,IAAAA,KAAK,GAAGA,KAAK,KAAK,EAAV,GAAeA,KAAf,GAAuB,oBAA/B;AACAK,IAAAA,SAAS;AACV,GAHD;;AAIA,QAAMoB,SAAS,GAAG,YAAY;AAC5BzB,IAAAA,KAAK,GAAG,EAAR;AACAK,IAAAA,SAAS;AACV,GAHD;;AAIA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEJ,QAA7B;AAAuC,MAAA,WAAW,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,EAAE,EAAC,OAA9B;AAAsC,MAAA,OAAO,EAAEuB,YAA/C;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAEC,SAApC;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAjDe3B,S;UACGL,W;;;KADHK,S","sourcesContent":["\nimport React from 'react';\nimport {useNavigate} from \"react-router-dom\";\n\nconst API = process.env.REACT_APP_API;\n\nexport function TokenPage() {\n  const navigate = useNavigate();\n  let token = '';\n  const getToken = (event: React.ChangeEvent<HTMLInputElement>) => {\n    token = event.target.value;\n  }\n  const sendToken = async () => {\n    console.log(token);\n    const guest_mode_flag = token === '';\n    const result = await fetch(`${API}/set-token`, {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json', token},\n      body: JSON.stringify({token, guest_mode_flag})\n    });\n    const data = await result.json();\n    console.log('sendToken:', data);\n    if (data['err']) {\n      alert(data['msg']);\n    }\n    else {\n      window.sessionStorage.setItem('token', data['msg']);\n      goToMenu();\n    }\n  }\n  const goToMenu = () => {\n    navigate('/menu', {replace: true});\n  }\n  const checkAndSend = async () => {\n    token = token !== '' ? token : 'empty_string_token';\n    sendToken();\n  }\n  const guestMode = async () => {\n    token = '';\n    sendToken();\n  }\n  return (\n    <div>\n      <h1>QuantumSolver</h1>\n      <p>Write your IBMQ token: </p>\n      <input type='text' onChange={getToken} placeholder='IBMQ token'/>\n      <button className='button' id='okBtn' onClick={checkAndSend}>\n        <span>OK</span>\n      </button>\n      <p>Or</p>\n      <button className='button' onClick={guestMode}>\n        <span>Use Guest Mode</span>\n      </button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}