{"ast":null,"code":"var _jsxFileName = \"/home/andrea/Documentos/TFG/quantum-solver/quantum_solver_web/src/pages/LoadingExperimentPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API = process.env.REACT_APP_API;\nexport function LoadingExperimentPage() {\n  _s();\n\n  const navigate = useNavigate();\n  const [state, setState] = useState({\n    'algorithm': '',\n    'backend': '',\n    'params': '',\n    'n_shots': ''\n  });\n  useEffect(() => {\n    (async () => {\n      const n_shots = Number(prompt('[&] Number of repetitions: ', '1000'));\n\n      if (n_shots <= 0) {\n        alert('Number of repetitions must be positive, try again');\n        navigate('/menu', {\n          replace: true\n        });\n      }\n\n      const token = window.sessionStorage.getItem('token') || '';\n      const result = await fetch(`${API}/get-backend-algorithm-params`, {\n        method: 'GET',\n        headers: {\n          token\n        }\n      });\n      const data = await result.json();\n      console.log('Get backend, algorithm and params', data);\n      data['n_shots'] = n_shots;\n      setState(data);\n      await fetch(`${API}/run-experimental-mode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          token\n        },\n        body: JSON.stringify({\n          'n_shots': n_shots\n        })\n      });\n      navigate('/menu/output', {\n        replace: true\n      });\n    })();\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Executing \", state['n_shots'], \" times \\\"\", state['algorithm'], \"\\\" in \\\"\", state['backend'], \"\\\" with parameters: \\\"\", state['params'], \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoadingExperimentPage, \"hgw0HtJrsR0qPn4SslvFIzGon8c=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LoadingExperimentPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingExperimentPage\");","map":{"version":3,"sources":["/home/andrea/Documentos/TFG/quantum-solver/quantum_solver_web/src/pages/LoadingExperimentPage.tsx"],"names":["React","useState","useEffect","useNavigate","API","process","env","REACT_APP_API","LoadingExperimentPage","navigate","state","setState","n_shots","Number","prompt","alert","replace","token","window","sessionStorage","getItem","result","fetch","method","headers","data","json","console","log","body","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,kBAA1B;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB;AAEA,OAAO,SAASC,qBAAT,GAAiC;AAAA;;AACtC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AAAC,iBAAa,EAAd;AAAkB,eAAW,EAA7B;AAAiC,cAAU,EAA3C;AAA+C,eAAW;AAA1D,GAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMU,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,6BAAD,EAAgC,MAAhC,CAAP,CAAtB;;AACA,UAAIF,OAAO,IAAI,CAAf,EAAkB;AAChBG,QAAAA,KAAK,CAAC,mDAAD,CAAL;AACAN,QAAAA,QAAQ,CAAC,OAAD,EAAU;AAACO,UAAAA,OAAO,EAAE;AAAV,SAAV,CAAR;AACD;;AACD,YAAMC,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,KAA0C,EAAxD;AACA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAElB,GAAI,+BAAR,EAAwC;AAChEmB,QAAAA,MAAM,EAAE,KADwD;AAEhEC,QAAAA,OAAO,EAAE;AAACP,UAAAA;AAAD;AAFuD,OAAxC,CAA1B;AAIA,YAAMQ,IAAI,GAAG,MAAMJ,MAAM,CAACK,IAAP,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDH,IAAjD;AACAA,MAAAA,IAAI,CAAC,SAAD,CAAJ,GAAkBb,OAAlB;AACAD,MAAAA,QAAQ,CAACc,IAAD,CAAR;AACA,YAAMH,KAAK,CAAE,GAAElB,GAAI,wBAAR,EAAiC;AAC1CmB,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,OAAO,EAAE;AAAC,0BAAgB,kBAAjB;AAAqCP,UAAAA;AAArC,SAFiC;AAG1CY,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,qBAAWnB;AAAZ,SAAf;AAHoC,OAAjC,CAAX;AAKAH,MAAAA,QAAQ,CAAC,cAAD,EAAiB;AAACO,QAAAA,OAAO,EAAE;AAAV,OAAjB,CAAR;AACD,KArBD;AAsBD,GAvBQ,EAuBN,CAACP,QAAD,CAvBM,CAAT;AAwBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,+BACaC,KAAK,CAAC,SAAD,CADlB,eACuCA,KAAK,CAAC,WAAD,CAD5C,cAEOA,KAAK,CAAC,SAAD,CAFZ,4BAE6CA,KAAK,CAAC,QAAD,CAFlD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GApCeF,qB;UACGL,W;;;KADHK,qB","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {useNavigate} from \"react-router-dom\";\n\nconst API = process.env.REACT_APP_API;\n\nexport function LoadingExperimentPage() {\n  const navigate = useNavigate();\n  const [state, setState] = useState({'algorithm': '', 'backend': '', 'params': '', 'n_shots': ''});\n  useEffect(() => { \n    (async () => {\n      const n_shots = Number(prompt('[&] Number of repetitions: ', '1000'));\n      if (n_shots <= 0) {\n        alert('Number of repetitions must be positive, try again');\n        navigate('/menu', {replace: true});\n      }\n      const token = window.sessionStorage.getItem('token') || '';\n      const result = await fetch(`${API}/get-backend-algorithm-params`, {\n        method: 'GET',\n        headers: {token}\n      });\n      const data = await result.json();\n      console.log('Get backend, algorithm and params', data);\n      data['n_shots'] = n_shots;\n      setState(data);\n      await fetch(`${API}/run-experimental-mode`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json', token},\n        body: JSON.stringify({'n_shots': n_shots})\n      });\n      navigate('/menu/output', {replace: true});\n    })();\n  }, [navigate]);\n  return (\n    <div>\n      <h1>Loading...</h1>\n      <h2>\n        Executing {state['n_shots']} times \"{state['algorithm']}\"\n        in \"{state['backend']}\" with parameters: \"{state['params']}\"\n      </h2>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}