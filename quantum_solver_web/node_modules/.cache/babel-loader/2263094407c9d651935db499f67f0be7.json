{"ast":null,"code":"var _jsxFileName = \"/home/andrea/Documentos/TFG/quantum-solver/quantum_solver_web/src/pages/LoadingPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API = process.env.REACT_APP_API;\nexport function LoadingPage() {\n  _s();\n\n  const navigate = useNavigate();\n  const [state, setState] = useState({\n    'algorithm': '',\n    'backend': '',\n    'params': ''\n  });\n  useEffect(() => {\n    (async () => {\n      const token = window.sessionStorage.getItem('token') || '';\n      const result = await fetch(`${API}/get-backend-algorithm-params`, {\n        method: 'GET',\n        headers: {\n          token\n        }\n      });\n      const data = await result.json();\n      console.log('Get backend, algorithm and params', data);\n      setState(data);\n      await fetch(`${API}/run`, {\n        method: 'POST',\n        headers: {\n          token\n        }\n      });\n      navigate('/menu/output', {\n        replace: true\n      });\n    })();\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Executing \\\"\", state['algorithm'], \"\\\" in \\\"\", state['backend'], \"\\\" with parameters: \\\"\", state['params'], \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoadingPage, \"DQRgvIz3MibfgiyI5DUQPfC7u84=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LoadingPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingPage\");","map":{"version":3,"sources":["/home/andrea/Documentos/TFG/quantum-solver/quantum_solver_web/src/pages/LoadingPage.tsx"],"names":["React","useState","useEffect","useNavigate","API","process","env","REACT_APP_API","LoadingPage","navigate","state","setState","token","window","sessionStorage","getItem","result","fetch","method","headers","data","json","console","log","replace"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,kBAA1B;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAAA;;AAC5B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AAAC,iBAAa,EAAd;AAAkB,eAAW,EAA7B;AAAiC,cAAU;AAA3C,GAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMU,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,KAA0C,EAAxD;AACA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,+BAAR,EAAwC;AAChEc,QAAAA,MAAM,EAAE,KADwD;AAEhEC,QAAAA,OAAO,EAAE;AAACP,UAAAA;AAAD;AAFuD,OAAxC,CAA1B;AAIA,YAAMQ,IAAI,GAAG,MAAMJ,MAAM,CAACK,IAAP,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDH,IAAjD;AACAT,MAAAA,QAAQ,CAACS,IAAD,CAAR;AACA,YAAMH,KAAK,CAAE,GAAEb,GAAI,MAAR,EAAe;AACxBc,QAAAA,MAAM,EAAE,MADgB;AAExBC,QAAAA,OAAO,EAAE;AAACP,UAAAA;AAAD;AAFe,OAAf,CAAX;AAIAH,MAAAA,QAAQ,CAAC,cAAD,EAAiB;AAACe,QAAAA,OAAO,EAAE;AAAV,OAAjB,CAAR;AACD,KAdD;AAeD,GAhBQ,EAgBN,CAACf,QAAD,CAhBM,CAAT;AAiBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iCACcC,KAAK,CAAC,WAAD,CADnB,cACwCA,KAAK,CAAC,SAAD,CAD7C,4BAEqBA,KAAK,CAAC,QAAD,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA7BeF,W;UACGL,W;;;KADHK,W","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {useNavigate} from \"react-router-dom\";\n\nconst API = process.env.REACT_APP_API;\n\nexport function LoadingPage() {\n  const navigate = useNavigate();\n  const [state, setState] = useState({'algorithm': '', 'backend': '', 'params': ''});\n  useEffect(() => { \n    (async () => {\n      const token = window.sessionStorage.getItem('token') || '';\n      const result = await fetch(`${API}/get-backend-algorithm-params`, {\n        method: 'GET',\n        headers: {token}\n    });\n      const data = await result.json();\n      console.log('Get backend, algorithm and params', data);\n      setState(data);\n      await fetch(`${API}/run`, {\n        method: 'POST',\n        headers: {token}\n      });\n      navigate('/menu/output', {replace: true});\n    })();\n  }, [navigate]);\n  return (\n    <div>\n      <h1>Loading...</h1>\n      <h2>\n        Executing \"{state['algorithm']}\" in \"{state['backend']}\"\n        with parameters: \"{state['params']}\"\n      </h2>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}